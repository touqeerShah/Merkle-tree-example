/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "TKExchange",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TKExchange__factory>;
    getContractFactory(
      name: "Lock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lock__factory>;
    getContractFactory(
      name: "TKNFTMarketplace",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TKNFTMarketplace__factory>;
    getContractFactory(
      name: "TKDevsDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TKDevsDAO__factory>;
    getContractFactory(
      name: "TKDevs",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TKDevs__factory>;
    getContractFactory(
      name: "TKToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TKToken__factory>;
    getContractFactory(
      name: "Whitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Whitelist__factory>;
    getContractFactory(
      name: "ITKExchange",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITKExchange__factory>;
    getContractFactory(
      name: "ILock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILock__factory>;
    getContractFactory(
      name: "IMarketplace",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMarketplace__factory>;
    getContractFactory(
      name: "ITKDev",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITKDev__factory>;
    getContractFactory(
      name: "ITKDevDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITKDevDAO__factory>;
    getContractFactory(
      name: "IToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IToken__factory>;
    getContractFactory(
      name: "IWhitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWhitelist__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "TKExchange",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TKExchange>;
    getContractAt(
      name: "Lock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lock>;
    getContractAt(
      name: "TKNFTMarketplace",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TKNFTMarketplace>;
    getContractAt(
      name: "TKDevsDAO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TKDevsDAO>;
    getContractAt(
      name: "TKDevs",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TKDevs>;
    getContractAt(
      name: "TKToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TKToken>;
    getContractAt(
      name: "Whitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Whitelist>;
    getContractAt(
      name: "ITKExchange",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITKExchange>;
    getContractAt(
      name: "ILock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILock>;
    getContractAt(
      name: "IMarketplace",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMarketplace>;
    getContractAt(
      name: "ITKDev",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITKDev>;
    getContractAt(
      name: "ITKDevDAO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITKDevDAO>;
    getContractAt(
      name: "IToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IToken>;
    getContractAt(
      name: "IWhitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWhitelist>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
