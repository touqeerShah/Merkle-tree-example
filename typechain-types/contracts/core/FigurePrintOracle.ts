/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type VerifcaitonRecordStruct = {
  userId: PromiseOrValue<BytesLike>;
  numberTries: PromiseOrValue<BigNumberish>;
  status: PromiseOrValue<BigNumberish>;
};

export type VerifcaitonRecordStructOutput = [string, BigNumber, number] & {
  userId: string;
  numberTries: BigNumber;
  status: number;
};

export interface FigurePrintOracleInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "baseUrl()": FunctionFragment;
    "burnUserRecord(address)": FunctionFragment;
    "createUserSimpleRecord(uint8,uint256)": FunctionFragment;
    "fulfillMultipleParameters(bytes32,string)": FunctionFragment;
    "getBaseURI()": FunctionFragment;
    "getChainLinkOracle()": FunctionFragment;
    "getChainLinkToken()": FunctionFragment;
    "getFee()": FunctionFragment;
    "getJobId()": FunctionFragment;
    "getLinkBalance()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getUserRecord(address)": FunctionFragment;
    "getUserStatusRecord(address)": FunctionFragment;
    "getUserVerification(address)": FunctionFragment;
    "getVerifier()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "onTokenTransfer(address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setChainLinkOracle(address)": FunctionFragment;
    "setChainLinkToken(address)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setJobId(bytes32)": FunctionFragment;
    "setVeriferRole(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBaseURI()": FunctionFragment;
    "verifyFingerPrint(address,bytes,bytes)": FunctionFragment;
    "withdrawLink()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "acceptOwnership"
      | "baseUrl"
      | "burnUserRecord"
      | "createUserSimpleRecord"
      | "fulfillMultipleParameters"
      | "getBaseURI"
      | "getChainLinkOracle"
      | "getChainLinkToken"
      | "getFee"
      | "getJobId"
      | "getLinkBalance"
      | "getRoleAdmin"
      | "getUserRecord"
      | "getUserStatusRecord"
      | "getUserVerification"
      | "getVerifier"
      | "grantRole"
      | "hasRole"
      | "onTokenTransfer"
      | "owner"
      | "renounceRole"
      | "revokeRole"
      | "setChainLinkOracle"
      | "setChainLinkToken"
      | "setFee"
      | "setJobId"
      | "setVeriferRole"
      | "supportsInterface"
      | "transferOwnership"
      | "updateBaseURI"
      | "verifyFingerPrint"
      | "withdrawLink"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseUrl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnUserRecord",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createUserSimpleRecord",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillMultipleParameters",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainLinkOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainLinkToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "getJobId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLinkBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRecord",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStatusRecord",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVerification",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainLinkOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainLinkToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setJobId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVeriferRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBaseURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyFingerPrint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLink",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseUrl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnUserRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createUserSimpleRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillMultipleParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChainLinkOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainLinkToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getJobId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLinkBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStatusRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setChainLinkOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainLinkToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setJobId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVeriferRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyFingerPrint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLink",
    data: BytesLike
  ): Result;

  events: {
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
    "FallbackCalled(address,uint256)": EventFragment;
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReceivedCalled(address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetChainLinkOracle(address)": EventFragment;
    "SetChainLinkToken(address)": EventFragment;
    "SetFee(uint256)": EventFragment;
    "SetJobId(bytes32)": EventFragment;
    "SetVeriferRole(address)": EventFragment;
    "VerifationResponse(address,bytes32,string)": EventFragment;
    "VerifyFingerPrint(bytes,bytes32,address)": EventFragment;
    "WithDrawAmount(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FallbackCalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedCalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetChainLinkOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetChainLinkToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetJobId"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVeriferRole"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifationResponse"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifyFingerPrint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithDrawAmount"): EventFragment;
}

export interface ChainlinkCancelledEventObject {
  id: string;
}
export type ChainlinkCancelledEvent = TypedEvent<
  [string],
  ChainlinkCancelledEventObject
>;

export type ChainlinkCancelledEventFilter =
  TypedEventFilter<ChainlinkCancelledEvent>;

export interface ChainlinkFulfilledEventObject {
  id: string;
}
export type ChainlinkFulfilledEvent = TypedEvent<
  [string],
  ChainlinkFulfilledEventObject
>;

export type ChainlinkFulfilledEventFilter =
  TypedEventFilter<ChainlinkFulfilledEvent>;

export interface ChainlinkRequestedEventObject {
  id: string;
}
export type ChainlinkRequestedEvent = TypedEvent<
  [string],
  ChainlinkRequestedEventObject
>;

export type ChainlinkRequestedEventFilter =
  TypedEventFilter<ChainlinkRequestedEvent>;

export interface FallbackCalledEventObject {
  buyer: string;
  amount: BigNumber;
}
export type FallbackCalledEvent = TypedEvent<
  [string, BigNumber],
  FallbackCalledEventObject
>;

export type FallbackCalledEventFilter = TypedEventFilter<FallbackCalledEvent>;

export interface OwnershipTransferRequestedEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string],
  OwnershipTransferRequestedEventObject
>;

export type OwnershipTransferRequestedEventFilter =
  TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReceivedCalledEventObject {
  buyer: string;
  amount: BigNumber;
}
export type ReceivedCalledEvent = TypedEvent<
  [string, BigNumber],
  ReceivedCalledEventObject
>;

export type ReceivedCalledEventFilter = TypedEventFilter<ReceivedCalledEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SetChainLinkOracleEventObject {
  oricle: string;
}
export type SetChainLinkOracleEvent = TypedEvent<
  [string],
  SetChainLinkOracleEventObject
>;

export type SetChainLinkOracleEventFilter =
  TypedEventFilter<SetChainLinkOracleEvent>;

export interface SetChainLinkTokenEventObject {
  linkToken: string;
}
export type SetChainLinkTokenEvent = TypedEvent<
  [string],
  SetChainLinkTokenEventObject
>;

export type SetChainLinkTokenEventFilter =
  TypedEventFilter<SetChainLinkTokenEvent>;

export interface SetFeeEventObject {
  fee: BigNumber;
}
export type SetFeeEvent = TypedEvent<[BigNumber], SetFeeEventObject>;

export type SetFeeEventFilter = TypedEventFilter<SetFeeEvent>;

export interface SetJobIdEventObject {
  jobId: string;
}
export type SetJobIdEvent = TypedEvent<[string], SetJobIdEventObject>;

export type SetJobIdEventFilter = TypedEventFilter<SetJobIdEvent>;

export interface SetVeriferRoleEventObject {
  verifer: string;
}
export type SetVeriferRoleEvent = TypedEvent<
  [string],
  SetVeriferRoleEventObject
>;

export type SetVeriferRoleEventFilter = TypedEventFilter<SetVeriferRoleEvent>;

export interface VerifationResponseEventObject {
  userAddress: string;
  requestId: string;
  isVerfied: string;
}
export type VerifationResponseEvent = TypedEvent<
  [string, string, string],
  VerifationResponseEventObject
>;

export type VerifationResponseEventFilter =
  TypedEventFilter<VerifationResponseEvent>;

export interface VerifyFingerPrintEventObject {
  userId: string;
  requestId: string;
  userAddress: string;
}
export type VerifyFingerPrintEvent = TypedEvent<
  [string, string, string],
  VerifyFingerPrintEventObject
>;

export type VerifyFingerPrintEventFilter =
  TypedEventFilter<VerifyFingerPrintEvent>;

export interface WithDrawAmountEventObject {
  buyer: string;
  amount: BigNumber;
}
export type WithDrawAmountEvent = TypedEvent<
  [string, BigNumber],
  WithDrawAmountEventObject
>;

export type WithDrawAmountEventFilter = TypedEventFilter<WithDrawAmountEvent>;

export interface FigurePrintOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FigurePrintOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    baseUrl(overrides?: CallOverrides): Promise<[string]>;

    burnUserRecord(
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createUserSimpleRecord(
      status: PromiseOrValue<BigNumberish>,
      numberTries: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fulfillMultipleParameters(
      _requestId: PromiseOrValue<BytesLike>,
      isVerfied: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBaseURI(overrides?: CallOverrides): Promise<[string]>;

    getChainLinkOracle(overrides?: CallOverrides): Promise<[string]>;

    getChainLinkToken(overrides?: CallOverrides): Promise<[string]>;

    getFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getJobId(overrides?: CallOverrides): Promise<[string]>;

    getLinkBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserRecord(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[VerifcaitonRecordStructOutput]>;

    getUserStatusRecord(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getUserVerification(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getVerifier(overrides?: CallOverrides): Promise<[boolean]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onTokenTransfer(
      sender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setChainLinkOracle(
      oricle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setChainLinkToken(
      linkToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setJobId(
      _jobId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVeriferRole(
      verifer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBaseURI(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyFingerPrint(
      userAddress: PromiseOrValue<string>,
      userId: PromiseOrValue<BytesLike>,
      fingerPrint: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawLink(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  baseUrl(overrides?: CallOverrides): Promise<string>;

  burnUserRecord(
    userAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createUserSimpleRecord(
    status: PromiseOrValue<BigNumberish>,
    numberTries: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fulfillMultipleParameters(
    _requestId: PromiseOrValue<BytesLike>,
    isVerfied: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBaseURI(overrides?: CallOverrides): Promise<string>;

  getChainLinkOracle(overrides?: CallOverrides): Promise<string>;

  getChainLinkToken(overrides?: CallOverrides): Promise<string>;

  getFee(overrides?: CallOverrides): Promise<BigNumber>;

  getJobId(overrides?: CallOverrides): Promise<string>;

  getLinkBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserRecord(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<VerifcaitonRecordStructOutput>;

  getUserStatusRecord(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getUserVerification(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getVerifier(overrides?: CallOverrides): Promise<boolean>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onTokenTransfer(
    sender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setChainLinkOracle(
    oricle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setChainLinkToken(
    linkToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setJobId(
    _jobId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVeriferRole(
    verifer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBaseURI(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyFingerPrint(
    userAddress: PromiseOrValue<string>,
    userId: PromiseOrValue<BytesLike>,
    fingerPrint: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawLink(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    baseUrl(overrides?: CallOverrides): Promise<string>;

    burnUserRecord(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createUserSimpleRecord(
      status: PromiseOrValue<BigNumberish>,
      numberTries: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillMultipleParameters(
      _requestId: PromiseOrValue<BytesLike>,
      isVerfied: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBaseURI(overrides?: CallOverrides): Promise<string>;

    getChainLinkOracle(overrides?: CallOverrides): Promise<string>;

    getChainLinkToken(overrides?: CallOverrides): Promise<string>;

    getFee(overrides?: CallOverrides): Promise<BigNumber>;

    getJobId(overrides?: CallOverrides): Promise<string>;

    getLinkBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserRecord(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<VerifcaitonRecordStructOutput>;

    getUserStatusRecord(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getUserVerification(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getVerifier(overrides?: CallOverrides): Promise<boolean>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onTokenTransfer(
      sender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainLinkOracle(
      oricle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainLinkToken(
      linkToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setJobId(
      _jobId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVeriferRole(
      verifer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBaseURI(overrides?: CallOverrides): Promise<void>;

    verifyFingerPrint(
      userAddress: PromiseOrValue<string>,
      userId: PromiseOrValue<BytesLike>,
      fingerPrint: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawLink(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ChainlinkCancelled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkCancelledEventFilter;
    ChainlinkCancelled(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkCancelledEventFilter;

    "ChainlinkFulfilled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkFulfilledEventFilter;
    ChainlinkFulfilled(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkFulfilledEventFilter;

    "ChainlinkRequested(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkRequestedEventFilter;
    ChainlinkRequested(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkRequestedEventFilter;

    "FallbackCalled(address,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): FallbackCalledEventFilter;
    FallbackCalled(
      buyer?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): FallbackCalledEventFilter;

    "OwnershipTransferRequested(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ReceivedCalled(address,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): ReceivedCalledEventFilter;
    ReceivedCalled(
      buyer?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): ReceivedCalledEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SetChainLinkOracle(address)"(
      oricle?: PromiseOrValue<string> | null
    ): SetChainLinkOracleEventFilter;
    SetChainLinkOracle(
      oricle?: PromiseOrValue<string> | null
    ): SetChainLinkOracleEventFilter;

    "SetChainLinkToken(address)"(
      linkToken?: PromiseOrValue<string> | null
    ): SetChainLinkTokenEventFilter;
    SetChainLinkToken(
      linkToken?: PromiseOrValue<string> | null
    ): SetChainLinkTokenEventFilter;

    "SetFee(uint256)"(
      fee?: PromiseOrValue<BigNumberish> | null
    ): SetFeeEventFilter;
    SetFee(fee?: PromiseOrValue<BigNumberish> | null): SetFeeEventFilter;

    "SetJobId(bytes32)"(
      jobId?: PromiseOrValue<BytesLike> | null
    ): SetJobIdEventFilter;
    SetJobId(jobId?: PromiseOrValue<BytesLike> | null): SetJobIdEventFilter;

    "SetVeriferRole(address)"(
      verifer?: PromiseOrValue<string> | null
    ): SetVeriferRoleEventFilter;
    SetVeriferRole(
      verifer?: PromiseOrValue<string> | null
    ): SetVeriferRoleEventFilter;

    "VerifationResponse(address,bytes32,string)"(
      userAddress?: PromiseOrValue<string> | null,
      requestId?: PromiseOrValue<BytesLike> | null,
      isVerfied?: PromiseOrValue<string> | null
    ): VerifationResponseEventFilter;
    VerifationResponse(
      userAddress?: PromiseOrValue<string> | null,
      requestId?: PromiseOrValue<BytesLike> | null,
      isVerfied?: PromiseOrValue<string> | null
    ): VerifationResponseEventFilter;

    "VerifyFingerPrint(bytes,bytes32,address)"(
      userId?: PromiseOrValue<BytesLike> | null,
      requestId?: null,
      userAddress?: null
    ): VerifyFingerPrintEventFilter;
    VerifyFingerPrint(
      userId?: PromiseOrValue<BytesLike> | null,
      requestId?: null,
      userAddress?: null
    ): VerifyFingerPrintEventFilter;

    "WithDrawAmount(address,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): WithDrawAmountEventFilter;
    WithDrawAmount(
      buyer?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): WithDrawAmountEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    baseUrl(overrides?: CallOverrides): Promise<BigNumber>;

    burnUserRecord(
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createUserSimpleRecord(
      status: PromiseOrValue<BigNumberish>,
      numberTries: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fulfillMultipleParameters(
      _requestId: PromiseOrValue<BytesLike>,
      isVerfied: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBaseURI(overrides?: CallOverrides): Promise<BigNumber>;

    getChainLinkOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getChainLinkToken(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(overrides?: CallOverrides): Promise<BigNumber>;

    getJobId(overrides?: CallOverrides): Promise<BigNumber>;

    getLinkBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRecord(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStatusRecord(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserVerification(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onTokenTransfer(
      sender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setChainLinkOracle(
      oricle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setChainLinkToken(
      linkToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setJobId(
      _jobId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVeriferRole(
      verifer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBaseURI(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyFingerPrint(
      userAddress: PromiseOrValue<string>,
      userId: PromiseOrValue<BytesLike>,
      fingerPrint: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawLink(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    baseUrl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnUserRecord(
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createUserSimpleRecord(
      status: PromiseOrValue<BigNumberish>,
      numberTries: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fulfillMultipleParameters(
      _requestId: PromiseOrValue<BytesLike>,
      isVerfied: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBaseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainLinkOracle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainLinkToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getJobId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLinkBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRecord(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStatusRecord(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserVerification(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onTokenTransfer(
      sender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setChainLinkOracle(
      oricle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setChainLinkToken(
      linkToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setJobId(
      _jobId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVeriferRole(
      verifer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBaseURI(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyFingerPrint(
      userAddress: PromiseOrValue<string>,
      userId: PromiseOrValue<BytesLike>,
      fingerPrint: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLink(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
