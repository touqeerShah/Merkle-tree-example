/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IDocumentSignature {
  export type PartyStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
    signatures: PromiseOrValue<BytesLike>;
  };

  export type PartyStructOutput = [BigNumber, number, string] & {
    tokenId: BigNumber;
    status: number;
    signatures: string;
  };

  export type DocumentDetialsStruct = {
    creator: PromiseOrValue<string>;
    name: PromiseOrValue<BytesLike>;
    tokenId: PromiseOrValue<BigNumberish>;
    description: PromiseOrValue<BytesLike>;
    parties: IDocumentSignature.PartyStruct[];
    status: PromiseOrValue<BigNumberish>;
    signatureStart: PromiseOrValue<BigNumberish>;
    signatureEnd: PromiseOrValue<BigNumberish>;
  };

  export type DocumentDetialsStructOutput = [
    string,
    string,
    BigNumber,
    string,
    IDocumentSignature.PartyStructOutput[],
    number,
    BigNumber,
    BigNumber
  ] & {
    creator: string;
    name: string;
    tokenId: BigNumber;
    description: string;
    parties: IDocumentSignature.PartyStructOutput[];
    status: number;
    signatureStart: BigNumber;
    signatureEnd: BigNumber;
  };

  export type DocumentDetialsWithSigatureStruct = {
    creator: PromiseOrValue<string>;
    name: PromiseOrValue<BytesLike>;
    description: PromiseOrValue<BytesLike>;
    parties: IDocumentSignature.PartyStruct[];
    status: PromiseOrValue<BigNumberish>;
    signatureStart: PromiseOrValue<BigNumberish>;
    signatureEnd: PromiseOrValue<BigNumberish>;
    documentId: PromiseOrValue<BigNumberish>;
    uri: PromiseOrValue<string>;
  };

  export type DocumentDetialsWithSigatureStructOutput = [
    string,
    string,
    string,
    IDocumentSignature.PartyStructOutput[],
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    creator: string;
    name: string;
    description: string;
    parties: IDocumentSignature.PartyStructOutput[];
    status: number;
    signatureStart: BigNumber;
    signatureEnd: BigNumber;
    documentId: BigNumber;
    uri: string;
  };
}

export interface IDocumentSignatureInterface extends utils.Interface {
  functions: {
    "checkMyCastedVote(uint256)": FunctionFragment;
    "createDocument(bytes,bytes,string,uint64,uint64,uint256[])": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "getDocumentDetails(uint256)": FunctionFragment;
    "getDocumentEndingingTime(uint256)": FunctionFragment;
    "getDocumentStartingTime(uint256)": FunctionFragment;
    "getStatus(uint256)": FunctionFragment;
    "processDocumentWithSignature((address,bytes,bytes,(uint256,uint8,bytes)[],uint8,uint64,uint64,uint256,string))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkMyCastedVote"
      | "createDocument"
      | "getCurrentTime"
      | "getDocumentDetails"
      | "getDocumentEndingingTime"
      | "getDocumentStartingTime"
      | "getStatus"
      | "processDocumentWithSignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkMyCastedVote",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createDocument",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDocumentDetails",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDocumentEndingingTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDocumentStartingTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "processDocumentWithSignature",
    values: [IDocumentSignature.DocumentDetialsWithSigatureStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkMyCastedVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocumentDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocumentEndingingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocumentStartingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processDocumentWithSignature",
    data: BytesLike
  ): Result;

  events: {
    "DocumentProcess(uint256,bool)": EventFragment;
    "DocumentProcessWithSignature(uint256,uint8)": EventFragment;
    "DocumentedCrearted(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DocumentProcess"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DocumentProcessWithSignature"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DocumentedCrearted"): EventFragment;
}

export interface DocumentProcessEventObject {
  documentId: BigNumber;
  isValidation: boolean;
}
export type DocumentProcessEvent = TypedEvent<
  [BigNumber, boolean],
  DocumentProcessEventObject
>;

export type DocumentProcessEventFilter = TypedEventFilter<DocumentProcessEvent>;

export interface DocumentProcessWithSignatureEventObject {
  documentId: BigNumber;
  status: number;
}
export type DocumentProcessWithSignatureEvent = TypedEvent<
  [BigNumber, number],
  DocumentProcessWithSignatureEventObject
>;

export type DocumentProcessWithSignatureEventFilter =
  TypedEventFilter<DocumentProcessWithSignatureEvent>;

export interface DocumentedCreartedEventObject {
  documentId: BigNumber;
  tokenId: BigNumber;
  creator: string;
}
export type DocumentedCreartedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  DocumentedCreartedEventObject
>;

export type DocumentedCreartedEventFilter =
  TypedEventFilter<DocumentedCreartedEvent>;

export interface IDocumentSignature extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDocumentSignatureInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkMyCastedVote(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    createDocument(
      name: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<BytesLike>,
      uri: PromiseOrValue<string>,
      signatureStartingPeriod: PromiseOrValue<BigNumberish>,
      signatureEndingingPeriod: PromiseOrValue<BigNumberish>,
      partiesTokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDocumentDetails(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IDocumentSignature.DocumentDetialsStructOutput]>;

    getDocumentEndingingTime(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDocumentStartingTime(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStatus(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    processDocumentWithSignature(
      documentDetialsWithSigature: IDocumentSignature.DocumentDetialsWithSigatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  checkMyCastedVote(
    documentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  createDocument(
    name: PromiseOrValue<BytesLike>,
    description: PromiseOrValue<BytesLike>,
    uri: PromiseOrValue<string>,
    signatureStartingPeriod: PromiseOrValue<BigNumberish>,
    signatureEndingingPeriod: PromiseOrValue<BigNumberish>,
    partiesTokenId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  getDocumentDetails(
    documentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IDocumentSignature.DocumentDetialsStructOutput>;

  getDocumentEndingingTime(
    documentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDocumentStartingTime(
    documentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStatus(
    documentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  processDocumentWithSignature(
    documentDetialsWithSigature: IDocumentSignature.DocumentDetialsWithSigatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkMyCastedVote(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    createDocument(
      name: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<BytesLike>,
      uri: PromiseOrValue<string>,
      signatureStartingPeriod: PromiseOrValue<BigNumberish>,
      signatureEndingingPeriod: PromiseOrValue<BigNumberish>,
      partiesTokenId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getDocumentDetails(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IDocumentSignature.DocumentDetialsStructOutput>;

    getDocumentEndingingTime(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDocumentStartingTime(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatus(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    processDocumentWithSignature(
      documentDetialsWithSigature: IDocumentSignature.DocumentDetialsWithSigatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DocumentProcess(uint256,bool)"(
      documentId?: PromiseOrValue<BigNumberish> | null,
      isValidation?: PromiseOrValue<boolean> | null
    ): DocumentProcessEventFilter;
    DocumentProcess(
      documentId?: PromiseOrValue<BigNumberish> | null,
      isValidation?: PromiseOrValue<boolean> | null
    ): DocumentProcessEventFilter;

    "DocumentProcessWithSignature(uint256,uint8)"(
      documentId?: PromiseOrValue<BigNumberish> | null,
      status?: null
    ): DocumentProcessWithSignatureEventFilter;
    DocumentProcessWithSignature(
      documentId?: PromiseOrValue<BigNumberish> | null,
      status?: null
    ): DocumentProcessWithSignatureEventFilter;

    "DocumentedCrearted(uint256,uint256,address)"(
      documentId?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null
    ): DocumentedCreartedEventFilter;
    DocumentedCrearted(
      documentId?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null
    ): DocumentedCreartedEventFilter;
  };

  estimateGas: {
    checkMyCastedVote(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createDocument(
      name: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<BytesLike>,
      uri: PromiseOrValue<string>,
      signatureStartingPeriod: PromiseOrValue<BigNumberish>,
      signatureEndingingPeriod: PromiseOrValue<BigNumberish>,
      partiesTokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getDocumentDetails(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDocumentEndingingTime(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDocumentStartingTime(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatus(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processDocumentWithSignature(
      documentDetialsWithSigature: IDocumentSignature.DocumentDetialsWithSigatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkMyCastedVote(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createDocument(
      name: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<BytesLike>,
      uri: PromiseOrValue<string>,
      signatureStartingPeriod: PromiseOrValue<BigNumberish>,
      signatureEndingingPeriod: PromiseOrValue<BigNumberish>,
      partiesTokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDocumentDetails(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDocumentEndingingTime(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDocumentStartingTime(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStatus(
      documentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processDocumentWithSignature(
      documentDetialsWithSigature: IDocumentSignature.DocumentDetialsWithSigatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
