/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ITKExchangeInterface extends utils.Interface {
  functions: {
    "addLiquidity(uint256)": FunctionFragment;
    "ethToTKDevToken(uint256)": FunctionFragment;
    "removeLiquidity(uint256)": FunctionFragment;
    "tkDevTokenToEth(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLiquidity"
      | "ethToTKDevToken"
      | "removeLiquidity"
      | "tkDevTokenToEth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ethToTKDevToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tkDevTokenToEth",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethToTKDevToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tkDevTokenToEth",
    data: BytesLike
  ): Result;

  events: {
    "AddLiquidity(address,uint256)": EventFragment;
    "EthToTKDevToken(address,uint256)": EventFragment;
    "RemoveLiquidity(address,uint256,uint256)": EventFragment;
    "TkDevTokenToEth(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthToTKDevToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TkDevTokenToEth"): EventFragment;
}

export interface AddLiquidityEventObject {
  userAddress: string;
  liquidity: BigNumber;
}
export type AddLiquidityEvent = TypedEvent<
  [string, BigNumber],
  AddLiquidityEventObject
>;

export type AddLiquidityEventFilter = TypedEventFilter<AddLiquidityEvent>;

export interface EthToTKDevTokenEventObject {
  userAddress: string;
  tokensBought: BigNumber;
}
export type EthToTKDevTokenEvent = TypedEvent<
  [string, BigNumber],
  EthToTKDevTokenEventObject
>;

export type EthToTKDevTokenEventFilter = TypedEventFilter<EthToTKDevTokenEvent>;

export interface RemoveLiquidityEventObject {
  userAddress: string;
  ethAmount: BigNumber;
  tkDevTokenAmount: BigNumber;
}
export type RemoveLiquidityEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RemoveLiquidityEventObject
>;

export type RemoveLiquidityEventFilter = TypedEventFilter<RemoveLiquidityEvent>;

export interface TkDevTokenToEthEventObject {
  userAddress: string;
  tokensBought: BigNumber;
}
export type TkDevTokenToEthEvent = TypedEvent<
  [string, BigNumber],
  TkDevTokenToEthEventObject
>;

export type TkDevTokenToEthEventFilter = TypedEventFilter<TkDevTokenToEthEvent>;

export interface ITKExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITKExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ethToTKDevToken(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tkDevTokenToEth(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ethToTKDevToken(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tkDevTokenToEth(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethToTKDevToken(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    tkDevTokenToEth(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddLiquidity(address,uint256)"(
      userAddress?: PromiseOrValue<string> | null,
      liquidity?: PromiseOrValue<BigNumberish> | null
    ): AddLiquidityEventFilter;
    AddLiquidity(
      userAddress?: PromiseOrValue<string> | null,
      liquidity?: PromiseOrValue<BigNumberish> | null
    ): AddLiquidityEventFilter;

    "EthToTKDevToken(address,uint256)"(
      userAddress?: PromiseOrValue<string> | null,
      tokensBought?: PromiseOrValue<BigNumberish> | null
    ): EthToTKDevTokenEventFilter;
    EthToTKDevToken(
      userAddress?: PromiseOrValue<string> | null,
      tokensBought?: PromiseOrValue<BigNumberish> | null
    ): EthToTKDevTokenEventFilter;

    "RemoveLiquidity(address,uint256,uint256)"(
      userAddress?: PromiseOrValue<string> | null,
      ethAmount?: PromiseOrValue<BigNumberish> | null,
      tkDevTokenAmount?: PromiseOrValue<BigNumberish> | null
    ): RemoveLiquidityEventFilter;
    RemoveLiquidity(
      userAddress?: PromiseOrValue<string> | null,
      ethAmount?: PromiseOrValue<BigNumberish> | null,
      tkDevTokenAmount?: PromiseOrValue<BigNumberish> | null
    ): RemoveLiquidityEventFilter;

    "TkDevTokenToEth(address,uint256)"(
      userAddress?: PromiseOrValue<string> | null,
      tokensBought?: PromiseOrValue<BigNumberish> | null
    ): TkDevTokenToEthEventFilter;
    TkDevTokenToEth(
      userAddress?: PromiseOrValue<string> | null,
      tokensBought?: PromiseOrValue<BigNumberish> | null
    ): TkDevTokenToEthEventFilter;
  };

  estimateGas: {
    addLiquidity(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ethToTKDevToken(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tkDevTokenToEth(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ethToTKDevToken(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tkDevTokenToEth(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
