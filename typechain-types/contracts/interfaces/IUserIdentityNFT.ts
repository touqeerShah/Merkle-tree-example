/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type UserIdVoucherStruct = {
  uri: PromiseOrValue<string>;
  userId: PromiseOrValue<BytesLike>;
  fingerPrint: PromiseOrValue<BytesLike>;
  signature: PromiseOrValue<BytesLike>;
};

export type UserIdVoucherStructOutput = [string, string, string, string] & {
  uri: string;
  userId: string;
  fingerPrint: string;
  signature: string;
};

export interface IUserIdentityNFTInterface extends utils.Interface {
  functions: {
    "checkBalance()": FunctionFragment;
    "createSimpleNFT()": FunctionFragment;
    "getFingerPrintAddress()": FunctionFragment;
    "getIdCount()": FunctionFragment;
    "redeem((string,bytes,bytes,bytes))": FunctionFragment;
    "setFingerPrintAddress(address)": FunctionFragment;
    "verifyFingerPrint(bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkBalance"
      | "createSimpleNFT"
      | "getFingerPrintAddress"
      | "getIdCount"
      | "redeem"
      | "setFingerPrintAddress"
      | "verifyFingerPrint"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createSimpleNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFingerPrintAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIdCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [UserIdVoucherStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setFingerPrintAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyFingerPrint",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSimpleNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFingerPrintAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIdCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFingerPrintAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyFingerPrint",
    data: BytesLike
  ): Result;

  events: {
    "IdVerifedAndIssued(bytes,address,bytes32)": EventFragment;
    "IssueDigitalIdentity(bytes,address,uint256)": EventFragment;
    "SetFingerPrintAddress(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IdVerifedAndIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssueDigitalIdentity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFingerPrintAddress"): EventFragment;
}

export interface IdVerifedAndIssuedEventObject {
  userId: string;
  userAddres: string;
  requestId: string;
}
export type IdVerifedAndIssuedEvent = TypedEvent<
  [string, string, string],
  IdVerifedAndIssuedEventObject
>;

export type IdVerifedAndIssuedEventFilter =
  TypedEventFilter<IdVerifedAndIssuedEvent>;

export interface IssueDigitalIdentityEventObject {
  userId: string;
  userAddres: string;
  tokenId: BigNumber;
}
export type IssueDigitalIdentityEvent = TypedEvent<
  [string, string, BigNumber],
  IssueDigitalIdentityEventObject
>;

export type IssueDigitalIdentityEventFilter =
  TypedEventFilter<IssueDigitalIdentityEvent>;

export interface SetFingerPrintAddressEventObject {
  figureprintOracle: string;
}
export type SetFingerPrintAddressEvent = TypedEvent<
  [string],
  SetFingerPrintAddressEventObject
>;

export type SetFingerPrintAddressEventFilter =
  TypedEventFilter<SetFingerPrintAddressEvent>;

export interface IUserIdentityNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUserIdentityNFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkBalance(overrides?: CallOverrides): Promise<[void]>;

    createSimpleNFT(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getFingerPrintAddress(overrides?: CallOverrides): Promise<[string]>;

    getIdCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeem(
      voucher: UserIdVoucherStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFingerPrintAddress(
      _fingerPrintAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyFingerPrint(
      userId: PromiseOrValue<BytesLike>,
      fingerPrint: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  checkBalance(overrides?: CallOverrides): Promise<void>;

  createSimpleNFT(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getFingerPrintAddress(overrides?: CallOverrides): Promise<string>;

  getIdCount(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    voucher: UserIdVoucherStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFingerPrintAddress(
    _fingerPrintAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyFingerPrint(
    userId: PromiseOrValue<BytesLike>,
    fingerPrint: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkBalance(overrides?: CallOverrides): Promise<void>;

    createSimpleNFT(overrides?: CallOverrides): Promise<void>;

    getFingerPrintAddress(overrides?: CallOverrides): Promise<string>;

    getIdCount(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      voucher: UserIdVoucherStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setFingerPrintAddress(
      _fingerPrintAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyFingerPrint(
      userId: PromiseOrValue<BytesLike>,
      fingerPrint: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "IdVerifedAndIssued(bytes,address,bytes32)"(
      userId?: PromiseOrValue<BytesLike> | null,
      userAddres?: null,
      requestId?: PromiseOrValue<BytesLike> | null
    ): IdVerifedAndIssuedEventFilter;
    IdVerifedAndIssued(
      userId?: PromiseOrValue<BytesLike> | null,
      userAddres?: null,
      requestId?: PromiseOrValue<BytesLike> | null
    ): IdVerifedAndIssuedEventFilter;

    "IssueDigitalIdentity(bytes,address,uint256)"(
      userId?: PromiseOrValue<BytesLike> | null,
      userAddres?: null,
      tokenId?: null
    ): IssueDigitalIdentityEventFilter;
    IssueDigitalIdentity(
      userId?: PromiseOrValue<BytesLike> | null,
      userAddres?: null,
      tokenId?: null
    ): IssueDigitalIdentityEventFilter;

    "SetFingerPrintAddress(address)"(
      figureprintOracle?: null
    ): SetFingerPrintAddressEventFilter;
    SetFingerPrintAddress(
      figureprintOracle?: null
    ): SetFingerPrintAddressEventFilter;
  };

  estimateGas: {
    checkBalance(overrides?: CallOverrides): Promise<BigNumber>;

    createSimpleNFT(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getFingerPrintAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getIdCount(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      voucher: UserIdVoucherStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFingerPrintAddress(
      _fingerPrintAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyFingerPrint(
      userId: PromiseOrValue<BytesLike>,
      fingerPrint: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createSimpleNFT(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getFingerPrintAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIdCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      voucher: UserIdVoucherStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFingerPrintAddress(
      _fingerPrintAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyFingerPrint(
      userId: PromiseOrValue<BytesLike>,
      fingerPrint: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
