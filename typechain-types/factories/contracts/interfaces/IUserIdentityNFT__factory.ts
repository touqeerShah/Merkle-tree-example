/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IUserIdentityNFT,
  IUserIdentityNFTInterface,
} from "../../../contracts/interfaces/IUserIdentityNFT";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
    ],
    name: "UserIdentityNFT__DirectMintNotAllow",
    type: "error",
  },
  {
    inputs: [],
    name: "UserIdentityNFT__FirstVerifyIdenetity",
    type: "error",
  },
  {
    inputs: [],
    name: "UserIdentityNFT__NotValidUserToRedeem",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
    ],
    name: "UserIdentityNFT__TransferNoAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
    ],
    name: "UserIdentityNFT__UserIdAlreadyIssued",
    type: "error",
  },
  {
    inputs: [],
    name: "UserIdentityNFT__VerficationStillFail",
    type: "error",
  },
  {
    inputs: [],
    name: "UserIdentityNFT__VerficationStillPending",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes",
        name: "userId",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "address",
        name: "userAddres",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
    ],
    name: "IdVerifedAndIssued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes",
        name: "userId",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "address",
        name: "userAddres",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "IssueDigitalIdentity",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "figureprintOracle",
        type: "address",
      },
    ],
    name: "SetFingerPrintAddress",
    type: "event",
  },
  {
    inputs: [],
    name: "checkBalance",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "createSimpleNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getFingerPrintAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getIdCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "uri",
            type: "string",
          },
          {
            internalType: "bytes",
            name: "userId",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "fingerPrint",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserIdVoucher",
        name: "voucher",
        type: "tuple",
      },
    ],
    name: "redeem",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_fingerPrintAddress",
        type: "address",
      },
    ],
    name: "setFingerPrintAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "userId",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "fingerPrint",
        type: "bytes",
      },
    ],
    name: "verifyFingerPrint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IUserIdentityNFT__factory {
  static readonly abi = _abi;
  static createInterface(): IUserIdentityNFTInterface {
    return new utils.Interface(_abi) as IUserIdentityNFTInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IUserIdentityNFT {
    return new Contract(address, _abi, signerOrProvider) as IUserIdentityNFT;
  }
}
