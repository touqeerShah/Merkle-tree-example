{
  "address": "0x0446d47c96222de201777099be7cf1f25ab3ae14",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Purchase",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "available",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f4e00864304d3be1f1552a1719c30b2e34e976793a19c0d78c833fac48d5363",
  "receipt": {
    "to": null,
    "from": "0xcbc477a6483e89b0267e1837ff233b87d5943988",
    "contractAddress": "0x0446d47c96222de201777099be7cf1f25ab3ae14",
    "transactionIndex": "0x19",
    "gasUsed": "0x4e229",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x511f85ce4adc05f56519d36cdd48cfacd702b109fa98cf0c902da6875594c19d",
    "transactionHash": "0x4f4e00864304d3be1f1552a1719c30b2e34e976793a19c0d78c833fac48d5363",
    "logs": [],
    "blockNumber": "0x368024",
    "cumulativeGasUsed": "0x3c5734",
    "status": "0x1"
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "96fb8d4217f9558a47d3f681c321945b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"available(uint256)\":{\"details\":\"available() checks whether the given tokenId has already been sold or not\",\"params\":{\"_tokenId\":\"- the tokenId to check for\"}},\"getPrice()\":{\"details\":\"getPrice() returns the price of one NFT\"},\"purchase(uint256)\":{\"details\":\"purchase() accepts ETH and marks the owner of the given tokenId as the caller address\",\"params\":{\"_tokenId\":\"- the fake NFT token Id to purchase\"}}},\"stateVariables\":{\"nftPrice\":{\"details\":\"Set the purchase price for each Fake NFT\"},\"tokens\":{\"details\":\"Maintain a mapping of Fake TokenID to Owner addresses\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Marketplace.sol\":\"TKNFTMarketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/Marketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../interfaces/IMarketplace.sol\\\";\\n\\ncontract TKNFTMarketplace is IMarketplace {\\n    /// @dev Maintain a mapping of Fake TokenID to Owner addresses\\n    mapping(uint256 => address) public tokens;\\n    /// @dev Set the purchase price for each Fake NFT\\n    uint256 nftPrice = 0.1 ether;\\n\\n    /// @dev purchase() accepts ETH and marks the owner of the given tokenId as the caller address\\n    /// @param _tokenId - the fake NFT token Id to purchase\\n    function purchase(uint256 _tokenId) external payable {\\n        require(msg.value == nftPrice, \\\"This NFT costs 0.1 ether\\\");\\n        tokens[_tokenId] = msg.sender;\\n        emit Purchase(msg.sender, _tokenId);\\n    }\\n\\n    /// @dev getPrice() returns the price of one NFT\\n    function getPrice() external view returns (uint256) {\\n        return nftPrice;\\n    }\\n\\n    /// @dev available() checks whether the given tokenId has already been sold or not\\n    /// @param _tokenId - the tokenId to check for\\n    function available(uint256 _tokenId) external view returns (bool) {\\n        // address(0) = 0x0000000000000000000000000000000000000000\\n        // This is the default value for addresses in Solidity\\n        if (tokens[_tokenId] == address(0)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xfa43f176ad0bae6986ae23471b16f086aba038397b61b037a38a5db8a8fccdae\",\"license\":\"MIT\"},\"contracts/interfaces/IMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\ninterface IMarketplace {\\n    //Events\\n    event Purchase(address indexed userAddress, uint256 indexed tokenId);\\n\\n    function getPrice() external returns (uint256);\\n\\n    function purchase(uint256) external payable;\\n\\n    function available(uint256) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3c22d93411aa98d3045a14ce1cab4ad2dacb87ce1181ef643c6831c05a307bda\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405267016345785d8a000060015534801561001c57600080fd5b5061046f8061002c6000396000f3fe60806040526004361061003f5760003560e01c80634f64b2be1461004457806396e494e81461008157806398d5fdca146100be578063efef39a1146100e9575b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906102d3565b610105565b6040516100789190610341565b60405180910390f35b34801561008d57600080fd5b506100a860048036038101906100a391906102d3565b610138565b6040516100b59190610377565b60405180910390f35b3480156100ca57600080fd5b506100d36101b2565b6040516100e091906103a1565b60405180910390f35b61010360048036038101906100fe91906102d3565b6101bc565b005b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036101a857600190506101ad565b600090505b919050565b6000600154905090565b6001543414610200576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f790610419565b60405180910390fd5b3360008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550803373ffffffffffffffffffffffffffffffffffffffff167f2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f63260405160405180910390a350565b600080fd5b6000819050919050565b6102b08161029d565b81146102bb57600080fd5b50565b6000813590506102cd816102a7565b92915050565b6000602082840312156102e9576102e8610298565b5b60006102f7848285016102be565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061032b82610300565b9050919050565b61033b81610320565b82525050565b60006020820190506103566000830184610332565b92915050565b60008115159050919050565b6103718161035c565b82525050565b600060208201905061038c6000830184610368565b92915050565b61039b8161029d565b82525050565b60006020820190506103b66000830184610392565b92915050565b600082825260208201905092915050565b7f54686973204e465420636f73747320302e312065746865720000000000000000600082015250565b60006104036018836103bc565b915061040e826103cd565b602082019050919050565b60006020820190508181036000830152610432816103f6565b905091905056fea2646970667358221220d53de6919eb1d6391f9673cc67765703e415d6ab498222255b896fad84dc4bdc64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80634f64b2be1461004457806396e494e81461008157806398d5fdca146100be578063efef39a1146100e9575b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906102d3565b610105565b6040516100789190610341565b60405180910390f35b34801561008d57600080fd5b506100a860048036038101906100a391906102d3565b610138565b6040516100b59190610377565b60405180910390f35b3480156100ca57600080fd5b506100d36101b2565b6040516100e091906103a1565b60405180910390f35b61010360048036038101906100fe91906102d3565b6101bc565b005b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036101a857600190506101ad565b600090505b919050565b6000600154905090565b6001543414610200576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f790610419565b60405180910390fd5b3360008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550803373ffffffffffffffffffffffffffffffffffffffff167f2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f63260405160405180910390a350565b600080fd5b6000819050919050565b6102b08161029d565b81146102bb57600080fd5b50565b6000813590506102cd816102a7565b92915050565b6000602082840312156102e9576102e8610298565b5b60006102f7848285016102be565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061032b82610300565b9050919050565b61033b81610320565b82525050565b60006020820190506103566000830184610332565b92915050565b60008115159050919050565b6103718161035c565b82525050565b600060208201905061038c6000830184610368565b92915050565b61039b8161029d565b82525050565b60006020820190506103b66000830184610392565b92915050565b600082825260208201905092915050565b7f54686973204e465420636f73747320302e312065746865720000000000000000600082015250565b60006104036018836103bc565b915061040e826103cd565b602082019050919050565b60006020820190508181036000830152610432816103f6565b905091905056fea2646970667358221220d53de6919eb1d6391f9673cc67765703e415d6ab498222255b896fad84dc4bdc64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "available(uint256)": {
        "details": "available() checks whether the given tokenId has already been sold or not",
        "params": {
          "_tokenId": "- the tokenId to check for"
        }
      },
      "getPrice()": {
        "details": "getPrice() returns the price of one NFT"
      },
      "purchase(uint256)": {
        "details": "purchase() accepts ETH and marks the owner of the given tokenId as the caller address",
        "params": {
          "_tokenId": "- the fake NFT token Id to purchase"
        }
      }
    },
    "stateVariables": {
      "nftPrice": {
        "details": "Set the purchase price for each Fake NFT"
      },
      "tokens": {
        "details": "Maintain a mapping of Fake TokenID to Owner addresses"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 220,
        "contract": "contracts/core/Marketplace.sol:TKNFTMarketplace",
        "label": "tokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 224,
        "contract": "contracts/core/Marketplace.sol:TKNFTMarketplace",
        "label": "nftPrice",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}