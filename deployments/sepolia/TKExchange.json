{
  "address": "0x865320757aed5a915822d90a04c909aaad228bfb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_TKDevtoken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokensBought",
          "type": "uint256"
        }
      ],
      "name": "EthToTKDevToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tkDevTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokensBought",
          "type": "uint256"
        }
      ],
      "name": "TkDevTokenToEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minTokens",
          "type": "uint256"
        }
      ],
      "name": "ethToTKDevToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inputReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputReserve",
          "type": "uint256"
        }
      ],
      "name": "getAmountOfTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tkDevTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokensSold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minEth",
          "type": "uint256"
        }
      ],
      "name": "tkDevTokenToEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa4ddf5a2c414de9526d0f9fca3be410c687959d7d38f743ff1fc7efbb322b332",
  "receipt": {
    "to": null,
    "from": "0xcbc477a6483e89b0267e1837ff233b87d5943988",
    "contractAddress": "0x865320757aed5a915822d90a04c909aaad228bfb",
    "transactionIndex": "0x16",
    "gasUsed": "0x23200f",
    "logsBloom": "0x
    "blockHash": "0x45fe5bca69493d3417af59b155c9556ad7eabca10f00fb6c20f60c322d8454cd",
    "transactionHash": "0xa4ddf5a2c414de9526d0f9fca3be410c687959d7d38f743ff1fc7efbb322b332",
    "logs": [],
    "blockNumber": "0x3696d8",
    "cumulativeGasUsed": "0x4828e0",
    "status": "0x1"
  },
  "args": [
    "0xdf7713b64827dea7cc9d74b36097120422d2e0ec"
  ],
  "numDeployments": 1,
  "solcInputHash": "e77bec43320dd5287f92b3ade954e3ea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TKDevtoken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"name\":\"EthToTKDevToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tkDevTokenAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"name\":\"TkDevTokenToEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTokens\",\"type\":\"uint256\"}],\"name\":\"ethToTKDevToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReserve\",\"type\":\"uint256\"}],\"name\":\"getAmountOfTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tkDevTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minEth\",\"type\":\"uint256\"}],\"name\":\"tkDevTokenToEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256)\":{\"details\":\"Adds liquidity to the TKexchange.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"ethToTKDevToken(uint256)\":{\"details\":\"Swaps Eth for TKDev Tokens\"},\"getAmountOfTokens(uint256,uint256,uint256)\":{\"details\":\"Returns the amount Eth/TK Dev tokens that would be returned to the user in the swap\"},\"getReserve()\":{\"details\":\"Returns the amount of `TK Dev Tokens` held by the contract\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"removeLiquidity(uint256)\":{\"details\":\"Returns the amount Eth/TK Dev tokens that would be returned to the user in the swap\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"tkDevTokenToEth(uint256,uint256)\":{\"details\":\"Swaps TKDev Tokens for Eth\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Exchange.sol\":\"TKExchange\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/core/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../interfaces/IExchange.sol\\\";\\n\\ncontract TKExchange is ERC20, ITKExchange {\\n    address public tkDevTokenAddress;\\n\\n    // TKExchange is inheriting ERC20, because our TKexchange would keep track of TK Dev LP tokens\\n    constructor(address _TKDevtoken) ERC20(\\\"TKDev LP Token\\\", \\\"TKLP\\\") {\\n        require(_TKDevtoken != address(0), \\\"Token address passed is a null address\\\");\\n        tkDevTokenAddress = _TKDevtoken;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of `TK Dev Tokens` held by the contract\\n     */\\n    function getReserve() public view returns (uint) {\\n        return ERC20(tkDevTokenAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Adds liquidity to the TKexchange.\\n     */\\n    function addLiquidity(uint _amount) public payable returns (uint) {\\n        uint liquidity;\\n        uint ethBalance = address(this).balance;\\n        uint tkDevTokenReserve = getReserve();\\n        ERC20 tkDevToken = ERC20(tkDevTokenAddress);\\n        /*\\n        If the reserve is empty, intake any user supplied value for\\n        `Ether` and `TK Dev` tokens because there is no ratio currently\\n    */\\n        if (tkDevTokenReserve == 0) {\\n            // Transfer the `tkDevToken` from the user's account to the contract\\n            tkDevToken.transferFrom(msg.sender, address(this), _amount);\\n            // Take the current ethBalance and mint `ethBalance` amount of LP tokens to the user.\\n            // `liquidity` provided is equal to `ethBalance` because this is the first time user\\n            // is adding `Eth` to the contract, so whatever `Eth` contract has is equal to the one supplied\\n            // by the user in the current `addLiquidity` call\\n            // `liquidity` tokens that need to be minted to the user on `addLiquidity` call should always be proportional\\n            // to the Eth specified by the user\\n            liquidity = ethBalance;\\n            _mint(msg.sender, liquidity);\\n            // _mint is ERC20.sol smart contract function to mint ERC20 tokens\\n            emit AddLiquidity(msg.sender, liquidity);\\n        } else {\\n            /*\\n            If the reserve is not empty, intake any user supplied value for\\n            `Ether` and determine according to the ratio how many `TK Dev` tokens\\n            need to be supplied to prevent any large price impacts because of the additional\\n            liquidity\\n        */\\n            // EthReserve should be the current ethBalance subtracted by the value of ether sent by the user\\n            // in the current `addLiquidity` call\\n            uint ethReserve = ethBalance - msg.value;\\n            // Ratio should always be maintained so that there are no major price impacts when adding liquidity\\n            // Ratio here is -> (tkDevTokenAmount user can add/tkDevTokenReserve in the contract) = (Eth Sent by the user/Eth Reserve in the contract);\\n            // So doing some maths, (tkDevTokenAmount user can add) = (Eth Sent by the user * tkDevTokenReserve /Eth Reserve);\\n            require(ethReserve > 0, \\\"Eth Reserve should be greater then zero\\\");\\n            uint tkDevTokenAmount = (msg.value * tkDevTokenReserve) / (ethReserve);\\n            require(\\n                _amount >= tkDevTokenAmount,\\n                \\\"Amount of tokens sent is less than the minimum tokens required\\\"\\n            );\\n            // transfer only (tkDevTokenAmount user can add) amount of `TK Dev tokens` from users account\\n            // to the contract\\n            tkDevToken.transferFrom(msg.sender, address(this), tkDevTokenAmount);\\n            // The amount of LP tokens that would be sent to the user should be proportional to the liquidity of\\n            // ether added by the user\\n            // Ratio here to be maintained is ->\\n            // (LP tokens to be sent to the user (liquidity)/ totalSupply of LP tokens in contract) = (Eth sent by the user)/(Eth reserve in the contract)\\n            // by some maths -> liquidity =  (totalSupply of LP tokens in contract * (Eth sent by the user))/(Eth reserve in the contract)\\n            liquidity = (totalSupply() * msg.value) / ethReserve;\\n            _mint(msg.sender, liquidity);\\n            emit AddLiquidity(msg.sender, liquidity);\\n        }\\n        return liquidity;\\n    }\\n\\n    /**\\n     * @dev Returns the amount Eth/TK Dev tokens that would be returned to the user\\n     * in the swap\\n     */\\n    function removeLiquidity(uint _amount) public returns (uint, uint) {\\n        require(_amount > 0, \\\"_amount should be greater than zero\\\");\\n        uint ethReserve = address(this).balance;\\n        uint _totalSupply = totalSupply();\\n        // The amount of Eth that would be sent back to the user is based\\n        // on a ratio\\n        // Ratio is -> (Eth sent back to the user) / (current Eth reserve)\\n        // = (amount of LP tokens that user wants to withdraw) / (total supply of LP tokens)\\n        // Then by some maths -> (Eth sent back to the user)\\n        // = (current Eth reserve * amount of LP tokens that user wants to withdraw) / (total supply of LP tokens)\\n        uint ethAmount = (ethReserve * _amount) / _totalSupply;\\n        // The amount of TK Dev token that would be sent back to the user is based\\n        // on a ratio\\n        // Ratio is -> (TK Dev sent back to the user) / (current TK Dev token reserve)\\n        // = (amount of LP tokens that user wants to withdraw) / (total supply of LP tokens)\\n        // Then by some maths -> (TK Dev sent back to the user)\\n        // = (current TK Dev token reserve * amount of LP tokens that user wants to withdraw) / (total supply of LP tokens)\\n        uint tkDevTokenAmount = (getReserve() * _amount) / _totalSupply;\\n        // Burn the sent LP tokens from the user's wallet because they are already sent to\\n        // remove liquidity\\n        _burn(msg.sender, _amount);\\n        // Transfer `ethAmount` of Eth from the contract to the user's wallet\\n        payable(msg.sender).transfer(ethAmount);\\n        // Transfer `tkDevTokenAmount` of TK Dev tokens from the contract to the user's wallet\\n        ERC20(tkDevTokenAddress).transfer(msg.sender, tkDevTokenAmount);\\n        return (ethAmount, tkDevTokenAmount);\\n        emit RemoveLiquidity(msg.sender, ethAmount, tkDevTokenAmount);\\n    }\\n\\n    /**\\n     * @dev Returns the amount Eth/TK Dev tokens that would be returned to the user\\n     * in the swap\\n     */\\n    function getAmountOfTokens(\\n        uint256 inputAmount,\\n        uint256 inputReserve,\\n        uint256 outputReserve\\n    ) public pure returns (uint256) {\\n        require(inputReserve > 0 && outputReserve > 0, \\\"invalid reserves\\\");\\n        // We are charging a fee of `1%`\\n        // Input amount with fee = (input amount - (1*(input amount)/100)) = ((input amount)*99)/100\\n        uint256 inputAmountWithFee = inputAmount * 99;\\n        // Because we need to follow the concept of `XY = K` curve\\n        // We need to make sure (x + \\u0394x) * (y - \\u0394y) = x * y\\n        // So the final formula is \\u0394y = (y * \\u0394x) / (x + \\u0394x)\\n        // \\u0394y in our case is `tokens to be received`\\n        // \\u0394x = ((input amount)*99)/100, x = inputReserve, y = outputReserve\\n        // So by putting the values in the formulae you can get the numerator and denominator\\n        uint256 numerator = inputAmountWithFee * outputReserve;\\n        uint256 denominator = (inputReserve * 100) + inputAmountWithFee;\\n        return numerator / denominator;\\n    }\\n\\n    /**\\n     * @dev Swaps Eth for TKDev Tokens\\n     */\\n    function ethToTKDevToken(uint _minTokens) public payable {\\n        uint256 tokenReserve = getReserve();\\n        // call the `getAmountOfTokens` to get the amount of TK Dev tokens\\n        // that would be returned to the user after the swap\\n        // Notice that the `inputReserve` we are sending is equal to\\n        // `address(this).balance - msg.value` instead of just `address(this).balance`\\n        // because `address(this).balance` already contains the `msg.value` user has sent in the given call\\n        // so we need to subtract it to get the actual input reserve\\n        uint256 tokensBought = getAmountOfTokens(\\n            msg.value,\\n            address(this).balance - msg.value,\\n            tokenReserve\\n        );\\n\\n        require(tokensBought >= _minTokens, \\\"insufficient output amount\\\");\\n        // Transfer the `TK Dev` tokens to the user\\n        ERC20(tkDevTokenAddress).transfer(msg.sender, tokensBought);\\n        emit EthToTKDevToken(msg.sender, tokensBought);\\n    }\\n\\n    /**\\n     * @dev Swaps TKDev Tokens for Eth\\n     */\\n    function tkDevTokenToEth(uint _tokensSold, uint _minEth) public {\\n        uint256 tokenReserve = getReserve();\\n        // call the `getAmountOfTokens` to get the amount of Eth\\n        // that would be returned to the user after the swap\\n        uint256 ethBought = getAmountOfTokens(_tokensSold, tokenReserve, address(this).balance);\\n        require(ethBought >= _minEth, \\\"insufficient output amount\\\");\\n        // Transfer `TK Dev` tokens from the user's address to the contract\\n        ERC20(tkDevTokenAddress).transferFrom(msg.sender, address(this), _tokensSold);\\n        // send the `ethBought` to the user from the contract\\n        payable(msg.sender).transfer(ethBought);\\n        emit TkDevTokenToEth(msg.sender, ethBought);\\n    }\\n}\\n\",\"keccak256\":\"0x44d1dbcf3068c9d5313531e6e7514db8b2246553aadfa005ab483b6306a08a50\",\"license\":\"MIT\"},\"contracts/interfaces/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\ninterface ITKExchange {\\n    //Events\\n    event AddLiquidity(address indexed userAddress, uint256 indexed liquidity);\\n    event RemoveLiquidity(\\n        address indexed userAddress,\\n        uint256 indexed ethAmount,\\n        uint256 indexed tkDevTokenAmount\\n    );\\n    event EthToTKDevToken(address indexed userAddress, uint256 indexed tokensBought);\\n    event TkDevTokenToEth(address indexed userAddress, uint256 indexed tokensBought);\\n\\n    function addLiquidity(uint) external payable returns (uint);\\n\\n    function removeLiquidity(uint) external returns (uint, uint);\\n\\n    function ethToTKDevToken(uint) external payable;\\n\\n    function tkDevTokenToEth(uint, uint) external;\\n}\\n\",\"keccak256\":\"0x5e8a442c9cebba5be12b0bb716fcf3283d76ec512b835c8939d2febcbad90efd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002d7338038062002d738339818101604052810190620000379190620001ed565b6040518060400160405280600e81526020017f544b446576204c5020546f6b656e0000000000000000000000000000000000008152506040518060400160405280600481526020017f544b4c50000000000000000000000000000000000000000000000000000000008152508160039081620000b4919062000499565b508060049081620000c6919062000499565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200013b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001329062000607565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000629565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001b58262000188565b9050919050565b620001c781620001a8565b8114620001d357600080fd5b50565b600081519050620001e781620001bc565b92915050565b60006020828403121562000206576200020562000183565b5b60006200021684828501620001d6565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002a157607f821691505b602082108103620002b757620002b662000259565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003217fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002e2565b6200032d8683620002e2565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200037a620003746200036e8462000345565b6200034f565b62000345565b9050919050565b6000819050919050565b620003968362000359565b620003ae620003a58262000381565b848454620002ef565b825550505050565b600090565b620003c5620003b6565b620003d28184846200038b565b505050565b5b81811015620003fa57620003ee600082620003bb565b600181019050620003d8565b5050565b601f82111562000449576200041381620002bd565b6200041e84620002d2565b810160208510156200042e578190505b620004466200043d85620002d2565b830182620003d7565b50505b505050565b600082821c905092915050565b60006200046e600019846008026200044e565b1980831691505092915050565b60006200048983836200045b565b9150826002028217905092915050565b620004a4826200021f565b67ffffffffffffffff811115620004c057620004bf6200022a565b5b620004cc825462000288565b620004d9828285620003fe565b600060209050601f831160018114620005115760008415620004fc578287015190505b6200050885826200047b565b86555062000578565b601f1984166200052186620002bd565b60005b828110156200054b5784890151825560018201915060208501945060208101905062000524565b868310156200056b578489015162000567601f8916826200045b565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f546f6b656e2061646472657373207061737365642069732061206e756c6c206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000620005ef60268362000580565b9150620005fc8262000591565b604082019050919050565b600060208201905081810360008301526200062281620005e0565b9050919050565b61273a80620006396000396000f3fe6080604052600436106101095760003560e01c806359bf5d391161009557806395d89b411161006457806395d89b411461038b5780639c8f9f23146103b6578063a457c2d7146103f4578063a9059cbb14610431578063dd62ed3e1461046e57610109565b806359bf5d39146102bd5780636ea6f987146102e857806370a08231146103115780637386479e1461034e57610109565b806323b872dd116100dc57806323b872dd146101cc578063313ce56714610209578063395093511461023457806351c6590a14610271578063542251d8146102a157610109565b806306fdde031461010e578063095ea7b3146101395780631628fa351461017657806318160ddd146101a1575b600080fd5b34801561011a57600080fd5b506101236104ab565b6040516101309190611915565b60405180910390f35b34801561014557600080fd5b50610160600480360381019061015b91906119d0565b61053d565b60405161016d9190611a2b565b60405180910390f35b34801561018257600080fd5b5061018b610560565b6040516101989190611a55565b60405180910390f35b3480156101ad57600080fd5b506101b6610586565b6040516101c39190611a7f565b60405180910390f35b3480156101d857600080fd5b506101f360048036038101906101ee9190611a9a565b610590565b6040516102009190611a2b565b60405180910390f35b34801561021557600080fd5b5061021e6105bf565b60405161022b9190611b09565b60405180910390f35b34801561024057600080fd5b5061025b600480360381019061025691906119d0565b6105c8565b6040516102689190611a2b565b60405180910390f35b61028b60048036038101906102869190611b24565b6105ff565b6040516102989190611a7f565b60405180910390f35b6102bb60048036038101906102b69190611b24565b6108c8565b005b3480156102c957600080fd5b506102d2610a1b565b6040516102df9190611a7f565b60405180910390f35b3480156102f457600080fd5b5061030f600480360381019061030a9190611b51565b610abe565b005b34801561031d57600080fd5b5061033860048036038101906103339190611b91565b610c50565b6040516103459190611a7f565b60405180910390f35b34801561035a57600080fd5b5061037560048036038101906103709190611bbe565b610c98565b6040516103829190611a7f565b60405180910390f35b34801561039757600080fd5b506103a0610d3d565b6040516103ad9190611915565b60405180910390f35b3480156103c257600080fd5b506103dd60048036038101906103d89190611b24565b610dcf565b6040516103eb929190611c11565b60405180910390f35b34801561040057600080fd5b5061041b600480360381019061041691906119d0565b610f64565b6040516104289190611a2b565b60405180910390f35b34801561043d57600080fd5b50610458600480360381019061045391906119d0565b610fdb565b6040516104659190611a2b565b60405180910390f35b34801561047a57600080fd5b5061049560048036038101906104909190611c3a565b610ffe565b6040516104a29190611a7f565b60405180910390f35b6060600380546104ba90611ca9565b80601f01602080910402602001604051908101604052809291908181526020018280546104e690611ca9565b80156105335780601f1061050857610100808354040283529160200191610533565b820191906000526020600020905b81548152906001019060200180831161051657829003601f168201915b5050505050905090565b600080610548611085565b905061055581858561108d565b600191505092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600254905090565b60008061059b611085565b90506105a8858285611256565b6105b38585856112e2565b60019150509392505050565b60006012905090565b6000806105d3611085565b90506105f48185856105e58589610ffe565b6105ef9190611d09565b61108d565b600191505092915050565b60008060004790506000610611610a1b565b90506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008203610719578073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161067f93929190611d3d565b6020604051808303816000875af115801561069e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c29190611da0565b508293506106d03385611558565b833373ffffffffffffffffffffffffffffffffffffffff167fbb37879e252460856212dc4e8c6edf174e473df9423e3a7feccd21f8c28d587a60405160405180910390a36108bc565b600034846107279190611dcd565b90506000811161076c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076390611e73565b60405180910390fd5b600081843461077b9190611e93565b6107859190611f04565b9050808810156107ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c190611fa7565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161080793929190611d3d565b6020604051808303816000875af1158015610826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084a9190611da0565b508134610855610586565b61085f9190611e93565b6108699190611f04565b95506108753387611558565b853373ffffffffffffffffffffffffffffffffffffffff167fbb37879e252460856212dc4e8c6edf174e473df9423e3a7feccd21f8c28d587a60405160405180910390a350505b83945050505050919050565b60006108d2610a1b565b905060006108ec3434476108e69190611dcd565b84610c98565b905082811015610931576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092890612013565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161098e929190612033565b6020604051808303816000875af11580156109ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d19190611da0565b50803373ffffffffffffffffffffffffffffffffffffffff167f7c100b22cad4b13b53ee1ab17af8e4f339ff0cc8437983159264c926962dbafa60405160405180910390a3505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a789190611a55565b602060405180830381865afa158015610a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab99190612071565b905090565b6000610ac8610a1b565b90506000610ad7848347610c98565b905082811015610b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1390612013565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610b7b93929190611d3d565b6020604051808303816000875af1158015610b9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbe9190611da0565b503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610c05573d6000803e3d6000fd5b50803373ffffffffffffffffffffffffffffffffffffffff167f1bb7dbba0e0d697463ab6e7f9eb43efe9cc52c02f1e289cad266f759c2a99d0d60405160405180910390a350505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008083118015610ca95750600082115b610ce8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdf906120ea565b60405180910390fd5b6000606385610cf79190611e93565b905060008382610d079190611e93565b9050600082606487610d199190611e93565b610d239190611d09565b90508082610d319190611f04565b93505050509392505050565b606060048054610d4c90611ca9565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7890611ca9565b8015610dc55780601f10610d9a57610100808354040283529160200191610dc5565b820191906000526020600020905b815481529060010190602001808311610da857829003601f168201915b5050505050905090565b60008060008311610e15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0c9061217c565b60405180910390fd5b60004790506000610e24610586565b90506000818684610e359190611e93565b610e3f9190611f04565b905060008287610e4d610a1b565b610e579190611e93565b610e619190611f04565b9050610e6d33886116ae565b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610eb3573d6000803e3d6000fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610f11929190612033565b6020604051808303816000875af1158015610f30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f549190611da0565b5081819550955050505050915091565b600080610f6f611085565b90506000610f7d8286610ffe565b905083811015610fc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb99061220e565b60405180910390fd5b610fcf828686840361108d565b60019250505092915050565b600080610fe6611085565b9050610ff38185856112e2565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036110fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f3906122a0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361116b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116290612332565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516112499190611a7f565b60405180910390a3505050565b60006112628484610ffe565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146112dc57818110156112ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c59061239e565b60405180910390fd5b6112db848484840361108d565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611351576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134890612430565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b7906124c2565b60405180910390fd5b6113cb83838361187b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611451576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144890612554565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161153f9190611a7f565b60405180910390a3611552848484611880565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115be906125c0565b60405180910390fd5b6115d36000838361187b565b80600260008282546115e59190611d09565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516116969190611a7f565b60405180910390a36116aa60008383611880565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361171d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171490612652565b60405180910390fd5b6117298260008361187b565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156117af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a6906126e4565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516118629190611a7f565b60405180910390a361187683600084611880565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156118bf5780820151818401526020810190506118a4565b60008484015250505050565b6000601f19601f8301169050919050565b60006118e782611885565b6118f18185611890565b93506119018185602086016118a1565b61190a816118cb565b840191505092915050565b6000602082019050818103600083015261192f81846118dc565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119678261193c565b9050919050565b6119778161195c565b811461198257600080fd5b50565b6000813590506119948161196e565b92915050565b6000819050919050565b6119ad8161199a565b81146119b857600080fd5b50565b6000813590506119ca816119a4565b92915050565b600080604083850312156119e7576119e6611937565b5b60006119f585828601611985565b9250506020611a06858286016119bb565b9150509250929050565b60008115159050919050565b611a2581611a10565b82525050565b6000602082019050611a406000830184611a1c565b92915050565b611a4f8161195c565b82525050565b6000602082019050611a6a6000830184611a46565b92915050565b611a798161199a565b82525050565b6000602082019050611a946000830184611a70565b92915050565b600080600060608486031215611ab357611ab2611937565b5b6000611ac186828701611985565b9350506020611ad286828701611985565b9250506040611ae3868287016119bb565b9150509250925092565b600060ff82169050919050565b611b0381611aed565b82525050565b6000602082019050611b1e6000830184611afa565b92915050565b600060208284031215611b3a57611b39611937565b5b6000611b48848285016119bb565b91505092915050565b60008060408385031215611b6857611b67611937565b5b6000611b76858286016119bb565b9250506020611b87858286016119bb565b9150509250929050565b600060208284031215611ba757611ba6611937565b5b6000611bb584828501611985565b91505092915050565b600080600060608486031215611bd757611bd6611937565b5b6000611be5868287016119bb565b9350506020611bf6868287016119bb565b9250506040611c07868287016119bb565b9150509250925092565b6000604082019050611c266000830185611a70565b611c336020830184611a70565b9392505050565b60008060408385031215611c5157611c50611937565b5b6000611c5f85828601611985565b9250506020611c7085828601611985565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611cc157607f821691505b602082108103611cd457611cd3611c7a565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d148261199a565b9150611d1f8361199a565b9250828201905080821115611d3757611d36611cda565b5b92915050565b6000606082019050611d526000830186611a46565b611d5f6020830185611a46565b611d6c6040830184611a70565b949350505050565b611d7d81611a10565b8114611d8857600080fd5b50565b600081519050611d9a81611d74565b92915050565b600060208284031215611db657611db5611937565b5b6000611dc484828501611d8b565b91505092915050565b6000611dd88261199a565b9150611de38361199a565b9250828203905081811115611dfb57611dfa611cda565b5b92915050565b7f45746820526573657276652073686f756c64206265206772656174657220746860008201527f656e207a65726f00000000000000000000000000000000000000000000000000602082015250565b6000611e5d602783611890565b9150611e6882611e01565b604082019050919050565b60006020820190508181036000830152611e8c81611e50565b9050919050565b6000611e9e8261199a565b9150611ea98361199a565b9250828202611eb78161199a565b91508282048414831517611ece57611ecd611cda565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611f0f8261199a565b9150611f1a8361199a565b925082611f2a57611f29611ed5565b5b828204905092915050565b7f416d6f756e74206f6620746f6b656e732073656e74206973206c65737320746860008201527f616e20746865206d696e696d756d20746f6b656e732072657175697265640000602082015250565b6000611f91603e83611890565b9150611f9c82611f35565b604082019050919050565b60006020820190508181036000830152611fc081611f84565b9050919050565b7f696e73756666696369656e74206f757470757420616d6f756e74000000000000600082015250565b6000611ffd601a83611890565b915061200882611fc7565b602082019050919050565b6000602082019050818103600083015261202c81611ff0565b9050919050565b60006040820190506120486000830185611a46565b6120556020830184611a70565b9392505050565b60008151905061206b816119a4565b92915050565b60006020828403121561208757612086611937565b5b60006120958482850161205c565b91505092915050565b7f696e76616c696420726573657276657300000000000000000000000000000000600082015250565b60006120d4601083611890565b91506120df8261209e565b602082019050919050565b60006020820190508181036000830152612103816120c7565b9050919050565b7f5f616d6f756e742073686f756c642062652067726561746572207468616e207a60008201527f65726f0000000000000000000000000000000000000000000000000000000000602082015250565b6000612166602383611890565b91506121718261210a565b604082019050919050565b6000602082019050818103600083015261219581612159565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006121f8602583611890565b91506122038261219c565b604082019050919050565b60006020820190508181036000830152612227816121eb565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061228a602483611890565b91506122958261222e565b604082019050919050565b600060208201905081810360008301526122b98161227d565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061231c602283611890565b9150612327826122c0565b604082019050919050565b6000602082019050818103600083015261234b8161230f565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612388601d83611890565b915061239382612352565b602082019050919050565b600060208201905081810360008301526123b78161237b565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061241a602583611890565b9150612425826123be565b604082019050919050565b600060208201905081810360008301526124498161240d565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006124ac602383611890565b91506124b782612450565b604082019050919050565b600060208201905081810360008301526124db8161249f565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061253e602683611890565b9150612549826124e2565b604082019050919050565b6000602082019050818103600083015261256d81612531565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006125aa601f83611890565b91506125b582612574565b602082019050919050565b600060208201905081810360008301526125d98161259d565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061263c602183611890565b9150612647826125e0565b604082019050919050565b6000602082019050818103600083015261266b8161262f565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006126ce602283611890565b91506126d982612672565b604082019050919050565b600060208201905081810360008301526126fd816126c1565b905091905056fea26469706673582212205c094fb64ca8eb477e7ccee0c26bd4154dd95e9cf6dc86e99fb9b9779df2e18064736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101095760003560e01c806359bf5d391161009557806395d89b411161006457806395d89b411461038b5780639c8f9f23146103b6578063a457c2d7146103f4578063a9059cbb14610431578063dd62ed3e1461046e57610109565b806359bf5d39146102bd5780636ea6f987146102e857806370a08231146103115780637386479e1461034e57610109565b806323b872dd116100dc57806323b872dd146101cc578063313ce56714610209578063395093511461023457806351c6590a14610271578063542251d8146102a157610109565b806306fdde031461010e578063095ea7b3146101395780631628fa351461017657806318160ddd146101a1575b600080fd5b34801561011a57600080fd5b506101236104ab565b6040516101309190611915565b60405180910390f35b34801561014557600080fd5b50610160600480360381019061015b91906119d0565b61053d565b60405161016d9190611a2b565b60405180910390f35b34801561018257600080fd5b5061018b610560565b6040516101989190611a55565b60405180910390f35b3480156101ad57600080fd5b506101b6610586565b6040516101c39190611a7f565b60405180910390f35b3480156101d857600080fd5b506101f360048036038101906101ee9190611a9a565b610590565b6040516102009190611a2b565b60405180910390f35b34801561021557600080fd5b5061021e6105bf565b60405161022b9190611b09565b60405180910390f35b34801561024057600080fd5b5061025b600480360381019061025691906119d0565b6105c8565b6040516102689190611a2b565b60405180910390f35b61028b60048036038101906102869190611b24565b6105ff565b6040516102989190611a7f565b60405180910390f35b6102bb60048036038101906102b69190611b24565b6108c8565b005b3480156102c957600080fd5b506102d2610a1b565b6040516102df9190611a7f565b60405180910390f35b3480156102f457600080fd5b5061030f600480360381019061030a9190611b51565b610abe565b005b34801561031d57600080fd5b5061033860048036038101906103339190611b91565b610c50565b6040516103459190611a7f565b60405180910390f35b34801561035a57600080fd5b5061037560048036038101906103709190611bbe565b610c98565b6040516103829190611a7f565b60405180910390f35b34801561039757600080fd5b506103a0610d3d565b6040516103ad9190611915565b60405180910390f35b3480156103c257600080fd5b506103dd60048036038101906103d89190611b24565b610dcf565b6040516103eb929190611c11565b60405180910390f35b34801561040057600080fd5b5061041b600480360381019061041691906119d0565b610f64565b6040516104289190611a2b565b60405180910390f35b34801561043d57600080fd5b50610458600480360381019061045391906119d0565b610fdb565b6040516104659190611a2b565b60405180910390f35b34801561047a57600080fd5b5061049560048036038101906104909190611c3a565b610ffe565b6040516104a29190611a7f565b60405180910390f35b6060600380546104ba90611ca9565b80601f01602080910402602001604051908101604052809291908181526020018280546104e690611ca9565b80156105335780601f1061050857610100808354040283529160200191610533565b820191906000526020600020905b81548152906001019060200180831161051657829003601f168201915b5050505050905090565b600080610548611085565b905061055581858561108d565b600191505092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600254905090565b60008061059b611085565b90506105a8858285611256565b6105b38585856112e2565b60019150509392505050565b60006012905090565b6000806105d3611085565b90506105f48185856105e58589610ffe565b6105ef9190611d09565b61108d565b600191505092915050565b60008060004790506000610611610a1b565b90506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008203610719578073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161067f93929190611d3d565b6020604051808303816000875af115801561069e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c29190611da0565b508293506106d03385611558565b833373ffffffffffffffffffffffffffffffffffffffff167fbb37879e252460856212dc4e8c6edf174e473df9423e3a7feccd21f8c28d587a60405160405180910390a36108bc565b600034846107279190611dcd565b90506000811161076c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076390611e73565b60405180910390fd5b600081843461077b9190611e93565b6107859190611f04565b9050808810156107ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c190611fa7565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161080793929190611d3d565b6020604051808303816000875af1158015610826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084a9190611da0565b508134610855610586565b61085f9190611e93565b6108699190611f04565b95506108753387611558565b853373ffffffffffffffffffffffffffffffffffffffff167fbb37879e252460856212dc4e8c6edf174e473df9423e3a7feccd21f8c28d587a60405160405180910390a350505b83945050505050919050565b60006108d2610a1b565b905060006108ec3434476108e69190611dcd565b84610c98565b905082811015610931576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092890612013565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161098e929190612033565b6020604051808303816000875af11580156109ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d19190611da0565b50803373ffffffffffffffffffffffffffffffffffffffff167f7c100b22cad4b13b53ee1ab17af8e4f339ff0cc8437983159264c926962dbafa60405160405180910390a3505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a789190611a55565b602060405180830381865afa158015610a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab99190612071565b905090565b6000610ac8610a1b565b90506000610ad7848347610c98565b905082811015610b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1390612013565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610b7b93929190611d3d565b6020604051808303816000875af1158015610b9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbe9190611da0565b503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610c05573d6000803e3d6000fd5b50803373ffffffffffffffffffffffffffffffffffffffff167f1bb7dbba0e0d697463ab6e7f9eb43efe9cc52c02f1e289cad266f759c2a99d0d60405160405180910390a350505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008083118015610ca95750600082115b610ce8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdf906120ea565b60405180910390fd5b6000606385610cf79190611e93565b905060008382610d079190611e93565b9050600082606487610d199190611e93565b610d239190611d09565b90508082610d319190611f04565b93505050509392505050565b606060048054610d4c90611ca9565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7890611ca9565b8015610dc55780601f10610d9a57610100808354040283529160200191610dc5565b820191906000526020600020905b815481529060010190602001808311610da857829003601f168201915b5050505050905090565b60008060008311610e15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0c9061217c565b60405180910390fd5b60004790506000610e24610586565b90506000818684610e359190611e93565b610e3f9190611f04565b905060008287610e4d610a1b565b610e579190611e93565b610e619190611f04565b9050610e6d33886116ae565b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610eb3573d6000803e3d6000fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610f11929190612033565b6020604051808303816000875af1158015610f30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f549190611da0565b5081819550955050505050915091565b600080610f6f611085565b90506000610f7d8286610ffe565b905083811015610fc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb99061220e565b60405180910390fd5b610fcf828686840361108d565b60019250505092915050565b600080610fe6611085565b9050610ff38185856112e2565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036110fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f3906122a0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361116b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116290612332565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516112499190611a7f565b60405180910390a3505050565b60006112628484610ffe565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146112dc57818110156112ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c59061239e565b60405180910390fd5b6112db848484840361108d565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611351576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134890612430565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b7906124c2565b60405180910390fd5b6113cb83838361187b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611451576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144890612554565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161153f9190611a7f565b60405180910390a3611552848484611880565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115be906125c0565b60405180910390fd5b6115d36000838361187b565b80600260008282546115e59190611d09565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516116969190611a7f565b60405180910390a36116aa60008383611880565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361171d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171490612652565b60405180910390fd5b6117298260008361187b565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156117af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a6906126e4565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516118629190611a7f565b60405180910390a361187683600084611880565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156118bf5780820151818401526020810190506118a4565b60008484015250505050565b6000601f19601f8301169050919050565b60006118e782611885565b6118f18185611890565b93506119018185602086016118a1565b61190a816118cb565b840191505092915050565b6000602082019050818103600083015261192f81846118dc565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119678261193c565b9050919050565b6119778161195c565b811461198257600080fd5b50565b6000813590506119948161196e565b92915050565b6000819050919050565b6119ad8161199a565b81146119b857600080fd5b50565b6000813590506119ca816119a4565b92915050565b600080604083850312156119e7576119e6611937565b5b60006119f585828601611985565b9250506020611a06858286016119bb565b9150509250929050565b60008115159050919050565b611a2581611a10565b82525050565b6000602082019050611a406000830184611a1c565b92915050565b611a4f8161195c565b82525050565b6000602082019050611a6a6000830184611a46565b92915050565b611a798161199a565b82525050565b6000602082019050611a946000830184611a70565b92915050565b600080600060608486031215611ab357611ab2611937565b5b6000611ac186828701611985565b9350506020611ad286828701611985565b9250506040611ae3868287016119bb565b9150509250925092565b600060ff82169050919050565b611b0381611aed565b82525050565b6000602082019050611b1e6000830184611afa565b92915050565b600060208284031215611b3a57611b39611937565b5b6000611b48848285016119bb565b91505092915050565b60008060408385031215611b6857611b67611937565b5b6000611b76858286016119bb565b9250506020611b87858286016119bb565b9150509250929050565b600060208284031215611ba757611ba6611937565b5b6000611bb584828501611985565b91505092915050565b600080600060608486031215611bd757611bd6611937565b5b6000611be5868287016119bb565b9350506020611bf6868287016119bb565b9250506040611c07868287016119bb565b9150509250925092565b6000604082019050611c266000830185611a70565b611c336020830184611a70565b9392505050565b60008060408385031215611c5157611c50611937565b5b6000611c5f85828601611985565b9250506020611c7085828601611985565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611cc157607f821691505b602082108103611cd457611cd3611c7a565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d148261199a565b9150611d1f8361199a565b9250828201905080821115611d3757611d36611cda565b5b92915050565b6000606082019050611d526000830186611a46565b611d5f6020830185611a46565b611d6c6040830184611a70565b949350505050565b611d7d81611a10565b8114611d8857600080fd5b50565b600081519050611d9a81611d74565b92915050565b600060208284031215611db657611db5611937565b5b6000611dc484828501611d8b565b91505092915050565b6000611dd88261199a565b9150611de38361199a565b9250828203905081811115611dfb57611dfa611cda565b5b92915050565b7f45746820526573657276652073686f756c64206265206772656174657220746860008201527f656e207a65726f00000000000000000000000000000000000000000000000000602082015250565b6000611e5d602783611890565b9150611e6882611e01565b604082019050919050565b60006020820190508181036000830152611e8c81611e50565b9050919050565b6000611e9e8261199a565b9150611ea98361199a565b9250828202611eb78161199a565b91508282048414831517611ece57611ecd611cda565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611f0f8261199a565b9150611f1a8361199a565b925082611f2a57611f29611ed5565b5b828204905092915050565b7f416d6f756e74206f6620746f6b656e732073656e74206973206c65737320746860008201527f616e20746865206d696e696d756d20746f6b656e732072657175697265640000602082015250565b6000611f91603e83611890565b9150611f9c82611f35565b604082019050919050565b60006020820190508181036000830152611fc081611f84565b9050919050565b7f696e73756666696369656e74206f757470757420616d6f756e74000000000000600082015250565b6000611ffd601a83611890565b915061200882611fc7565b602082019050919050565b6000602082019050818103600083015261202c81611ff0565b9050919050565b60006040820190506120486000830185611a46565b6120556020830184611a70565b9392505050565b60008151905061206b816119a4565b92915050565b60006020828403121561208757612086611937565b5b60006120958482850161205c565b91505092915050565b7f696e76616c696420726573657276657300000000000000000000000000000000600082015250565b60006120d4601083611890565b91506120df8261209e565b602082019050919050565b60006020820190508181036000830152612103816120c7565b9050919050565b7f5f616d6f756e742073686f756c642062652067726561746572207468616e207a60008201527f65726f0000000000000000000000000000000000000000000000000000000000602082015250565b6000612166602383611890565b91506121718261210a565b604082019050919050565b6000602082019050818103600083015261219581612159565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006121f8602583611890565b91506122038261219c565b604082019050919050565b60006020820190508181036000830152612227816121eb565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061228a602483611890565b91506122958261222e565b604082019050919050565b600060208201905081810360008301526122b98161227d565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061231c602283611890565b9150612327826122c0565b604082019050919050565b6000602082019050818103600083015261234b8161230f565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612388601d83611890565b915061239382612352565b602082019050919050565b600060208201905081810360008301526123b78161237b565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061241a602583611890565b9150612425826123be565b604082019050919050565b600060208201905081810360008301526124498161240d565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006124ac602383611890565b91506124b782612450565b604082019050919050565b600060208201905081810360008301526124db8161249f565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061253e602683611890565b9150612549826124e2565b604082019050919050565b6000602082019050818103600083015261256d81612531565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006125aa601f83611890565b91506125b582612574565b602082019050919050565b600060208201905081810360008301526125d98161259d565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061263c602183611890565b9150612647826125e0565b604082019050919050565b6000602082019050818103600083015261266b8161262f565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006126ce602283611890565b91506126d982612672565b604082019050919050565b600060208201905081810360008301526126fd816126c1565b905091905056fea26469706673582212205c094fb64ca8eb477e7ccee0c26bd4154dd95e9cf6dc86e99fb9b9779df2e18064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(uint256)": {
        "details": "Adds liquidity to the TKexchange."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "ethToTKDevToken(uint256)": {
        "details": "Swaps Eth for TKDev Tokens"
      },
      "getAmountOfTokens(uint256,uint256,uint256)": {
        "details": "Returns the amount Eth/TK Dev tokens that would be returned to the user in the swap"
      },
      "getReserve()": {
        "details": "Returns the amount of `TK Dev Tokens` held by the contract"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "removeLiquidity(uint256)": {
        "details": "Returns the amount Eth/TK Dev tokens that would be returned to the user in the swap"
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "tkDevTokenToEth(uint256,uint256)": {
        "details": "Swaps TKDev Tokens for Eth"
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15,
        "contract": "contracts/core/Exchange.sol:TKExchange",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21,
        "contract": "contracts/core/Exchange.sol:TKExchange",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 23,
        "contract": "contracts/core/Exchange.sol:TKExchange",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 25,
        "contract": "contracts/core/Exchange.sol:TKExchange",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/core/Exchange.sol:TKExchange",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 721,
        "contract": "contracts/core/Exchange.sol:TKExchange",
        "label": "tkDevTokenAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}