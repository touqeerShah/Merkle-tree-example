{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/core/Exchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../interfaces/IExchange.sol\";\n\ncontract TKExchange is ERC20, ITKExchange {\n    address public tkDevTokenAddress;\n\n    // TKExchange is inheriting ERC20, because our TKexchange would keep track of TK Dev LP tokens\n    constructor(address _TKDevtoken) ERC20(\"TKDev LP Token\", \"TKLP\") {\n        require(_TKDevtoken != address(0), \"Token address passed is a null address\");\n        tkDevTokenAddress = _TKDevtoken;\n    }\n\n    /**\n     * @dev Returns the amount of `TK Dev Tokens` held by the contract\n     */\n    function getReserve() public view returns (uint) {\n        return ERC20(tkDevTokenAddress).balanceOf(address(this));\n    }\n\n    /**\n     * @dev Adds liquidity to the TKexchange.\n     */\n    function addLiquidity(uint _amount) public payable returns (uint) {\n        uint liquidity;\n        uint ethBalance = address(this).balance;\n        uint tkDevTokenReserve = getReserve();\n        ERC20 tkDevToken = ERC20(tkDevTokenAddress);\n        /*\n        If the reserve is empty, intake any user supplied value for\n        `Ether` and `TK Dev` tokens because there is no ratio currently\n    */\n        if (tkDevTokenReserve == 0) {\n            // Transfer the `tkDevToken` from the user's account to the contract\n            tkDevToken.transferFrom(msg.sender, address(this), _amount);\n            // Take the current ethBalance and mint `ethBalance` amount of LP tokens to the user.\n            // `liquidity` provided is equal to `ethBalance` because this is the first time user\n            // is adding `Eth` to the contract, so whatever `Eth` contract has is equal to the one supplied\n            // by the user in the current `addLiquidity` call\n            // `liquidity` tokens that need to be minted to the user on `addLiquidity` call should always be proportional\n            // to the Eth specified by the user\n            liquidity = ethBalance;\n            _mint(msg.sender, liquidity);\n            // _mint is ERC20.sol smart contract function to mint ERC20 tokens\n            emit AddLiquidity(msg.sender, liquidity);\n        } else {\n            /*\n            If the reserve is not empty, intake any user supplied value for\n            `Ether` and determine according to the ratio how many `TK Dev` tokens\n            need to be supplied to prevent any large price impacts because of the additional\n            liquidity\n        */\n            // EthReserve should be the current ethBalance subtracted by the value of ether sent by the user\n            // in the current `addLiquidity` call\n            uint ethReserve = ethBalance - msg.value;\n            // Ratio should always be maintained so that there are no major price impacts when adding liquidity\n            // Ratio here is -> (tkDevTokenAmount user can add/tkDevTokenReserve in the contract) = (Eth Sent by the user/Eth Reserve in the contract);\n            // So doing some maths, (tkDevTokenAmount user can add) = (Eth Sent by the user * tkDevTokenReserve /Eth Reserve);\n            require(ethReserve > 0, \"Eth Reserve should be greater then zero\");\n            uint tkDevTokenAmount = (msg.value * tkDevTokenReserve) / (ethReserve);\n            require(\n                _amount >= tkDevTokenAmount,\n                \"Amount of tokens sent is less than the minimum tokens required\"\n            );\n            // transfer only (tkDevTokenAmount user can add) amount of `TK Dev tokens` from users account\n            // to the contract\n            tkDevToken.transferFrom(msg.sender, address(this), tkDevTokenAmount);\n            // The amount of LP tokens that would be sent to the user should be proportional to the liquidity of\n            // ether added by the user\n            // Ratio here to be maintained is ->\n            // (LP tokens to be sent to the user (liquidity)/ totalSupply of LP tokens in contract) = (Eth sent by the user)/(Eth reserve in the contract)\n            // by some maths -> liquidity =  (totalSupply of LP tokens in contract * (Eth sent by the user))/(Eth reserve in the contract)\n            liquidity = (totalSupply() * msg.value) / ethReserve;\n            _mint(msg.sender, liquidity);\n            emit AddLiquidity(msg.sender, liquidity);\n        }\n        return liquidity;\n    }\n\n    /**\n     * @dev Returns the amount Eth/TK Dev tokens that would be returned to the user\n     * in the swap\n     */\n    function removeLiquidity(uint _amount) public returns (uint, uint) {\n        require(_amount > 0, \"_amount should be greater than zero\");\n        uint ethReserve = address(this).balance;\n        uint _totalSupply = totalSupply();\n        // The amount of Eth that would be sent back to the user is based\n        // on a ratio\n        // Ratio is -> (Eth sent back to the user) / (current Eth reserve)\n        // = (amount of LP tokens that user wants to withdraw) / (total supply of LP tokens)\n        // Then by some maths -> (Eth sent back to the user)\n        // = (current Eth reserve * amount of LP tokens that user wants to withdraw) / (total supply of LP tokens)\n        uint ethAmount = (ethReserve * _amount) / _totalSupply;\n        // The amount of TK Dev token that would be sent back to the user is based\n        // on a ratio\n        // Ratio is -> (TK Dev sent back to the user) / (current TK Dev token reserve)\n        // = (amount of LP tokens that user wants to withdraw) / (total supply of LP tokens)\n        // Then by some maths -> (TK Dev sent back to the user)\n        // = (current TK Dev token reserve * amount of LP tokens that user wants to withdraw) / (total supply of LP tokens)\n        uint tkDevTokenAmount = (getReserve() * _amount) / _totalSupply;\n        // Burn the sent LP tokens from the user's wallet because they are already sent to\n        // remove liquidity\n        _burn(msg.sender, _amount);\n        // Transfer `ethAmount` of Eth from the contract to the user's wallet\n        payable(msg.sender).transfer(ethAmount);\n        // Transfer `tkDevTokenAmount` of TK Dev tokens from the contract to the user's wallet\n        ERC20(tkDevTokenAddress).transfer(msg.sender, tkDevTokenAmount);\n        return (ethAmount, tkDevTokenAmount);\n        emit RemoveLiquidity(msg.sender, ethAmount, tkDevTokenAmount);\n    }\n\n    /**\n     * @dev Returns the amount Eth/TK Dev tokens that would be returned to the user\n     * in the swap\n     */\n    function getAmountOfTokens(\n        uint256 inputAmount,\n        uint256 inputReserve,\n        uint256 outputReserve\n    ) public pure returns (uint256) {\n        require(inputReserve > 0 && outputReserve > 0, \"invalid reserves\");\n        // We are charging a fee of `1%`\n        // Input amount with fee = (input amount - (1*(input amount)/100)) = ((input amount)*99)/100\n        uint256 inputAmountWithFee = inputAmount * 99;\n        // Because we need to follow the concept of `XY = K` curve\n        // We need to make sure (x + Δx) * (y - Δy) = x * y\n        // So the final formula is Δy = (y * Δx) / (x + Δx)\n        // Δy in our case is `tokens to be received`\n        // Δx = ((input amount)*99)/100, x = inputReserve, y = outputReserve\n        // So by putting the values in the formulae you can get the numerator and denominator\n        uint256 numerator = inputAmountWithFee * outputReserve;\n        uint256 denominator = (inputReserve * 100) + inputAmountWithFee;\n        return numerator / denominator;\n    }\n\n    /**\n     * @dev Swaps Eth for TKDev Tokens\n     */\n    function ethToTKDevToken(uint _minTokens) public payable {\n        uint256 tokenReserve = getReserve();\n        // call the `getAmountOfTokens` to get the amount of TK Dev tokens\n        // that would be returned to the user after the swap\n        // Notice that the `inputReserve` we are sending is equal to\n        // `address(this).balance - msg.value` instead of just `address(this).balance`\n        // because `address(this).balance` already contains the `msg.value` user has sent in the given call\n        // so we need to subtract it to get the actual input reserve\n        uint256 tokensBought = getAmountOfTokens(\n            msg.value,\n            address(this).balance - msg.value,\n            tokenReserve\n        );\n\n        require(tokensBought >= _minTokens, \"insufficient output amount\");\n        // Transfer the `TK Dev` tokens to the user\n        ERC20(tkDevTokenAddress).transfer(msg.sender, tokensBought);\n        emit EthToTKDevToken(msg.sender, tokensBought);\n    }\n\n    /**\n     * @dev Swaps TKDev Tokens for Eth\n     */\n    function tkDevTokenToEth(uint _tokensSold, uint _minEth) public {\n        uint256 tokenReserve = getReserve();\n        // call the `getAmountOfTokens` to get the amount of Eth\n        // that would be returned to the user after the swap\n        uint256 ethBought = getAmountOfTokens(_tokensSold, tokenReserve, address(this).balance);\n        require(ethBought >= _minEth, \"insufficient output amount\");\n        // Transfer `TK Dev` tokens from the user's address to the contract\n        ERC20(tkDevTokenAddress).transferFrom(msg.sender, address(this), _tokensSold);\n        // send the `ethBought` to the user from the contract\n        payable(msg.sender).transfer(ethBought);\n        emit TkDevTokenToEth(msg.sender, ethBought);\n    }\n}\n"
    },
    "contracts/interfaces/IExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\ninterface ITKExchange {\n    //Events\n    event AddLiquidity(address indexed userAddress, uint256 indexed liquidity);\n    event RemoveLiquidity(\n        address indexed userAddress,\n        uint256 indexed ethAmount,\n        uint256 indexed tkDevTokenAmount\n    );\n    event EthToTKDevToken(address indexed userAddress, uint256 indexed tokensBought);\n    event TkDevTokenToEth(address indexed userAddress, uint256 indexed tokensBought);\n\n    function addLiquidity(uint) external payable returns (uint);\n\n    function removeLiquidity(uint) external returns (uint, uint);\n\n    function ethToTKDevToken(uint) external payable;\n\n    function tkDevTokenToEth(uint, uint) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}